{"version":3,"sources":["getDatasets.js","components/LocationSelector.js","App.js","index.js"],"names":["parseCsvData","data","csvParser","csvParse","csvArr","on","record","read","push","err","console","error","message","write","csvToNestedDataset","dataset","headerRow","forEach","row","i","countryRegion","provinceState","countryRegionData","latitude","longitude","dateData","provinceStateDateData","cellValue","j","date","Date","cases","getDatasets","callback","axios","all","get","then","spread","confirmedResponse","deathsResponse","recoveredResponse","confirmedDataset","deathsDataset","recoveredDataset","countryRegionsToProvinceStatesMap","Object","entries","entry","keys","catch","log","LocationSelector","props","selectedProvinceState","selectedCountryRegion","countryRegionsToProvinceStates","onCountryRegionChange","onProvinceStateChange","countryRegionOptions","sort","proviceStateOptions","onChange","value","key","disabled","map","defaultProps","App","useState","setCountryRegion","setProvinceState","setCountryRegionsToProvinceStates","sqlTableLoaded","setSqlTableLoaded","setConfirmedDataset","setDeathsDataset","setRecoveredDataset","useEffect","datasetToTableData","countryRegionFilter","provinceStateFilter","tableData","countryRegionDataEntry","provinceStateData","provinceStateDataEntry","dateDataItem","alasql","columnStatement","tables","confirmed","deaths","recovered","className","e","target","query","args","queryResult","length","renderDatasets","ReactDOM","render","document","getElementById"],"mappings":"qVAeMA,EAAe,SAACC,GACpB,IAAMC,EAAYC,MACZC,EAAS,GAiBf,OAdAF,EAAUG,GAAG,YAAY,WAEvB,IADA,IAAIC,EACIA,EAASJ,EAAUK,QACzBH,EAAOI,KAAKF,MAIhBJ,EAAUG,GAAG,SAAS,SAASI,GAC7BC,QAAQC,MAAMF,EAAIG,YAGpBV,EAAUW,MAAMZ,GAGTG,GA2CHU,EAAqB,SAACV,GAC1B,IAAMW,EAAU,GAEZC,EAAY,KAuChB,OArCAZ,EAAOa,SAAQ,SAACC,EAAKC,GACnB,GAAS,IAANA,EAAH,CAKA,IAAMC,EAAgBF,EApFI,GAqFtBG,EAAgBH,EAtFM,GAwF1B,GAAIE,EAAJ,CACAL,EAAQK,GAAiBL,EAAQK,IAAkB,GAEnD,IAAME,EAAoBP,EAAQK,GAI9BC,IAAiBA,EAAgBD,GAErCE,EAAkBD,GAAiBC,EAAkBD,IAAkB,CACrEE,SAAUL,EAhGQ,GAiGlBM,UAAWN,EAhGQ,GAiGnBO,SAAU,IAGZ,IAAMC,EAAwBJ,EAAkBD,GAAeI,SAE/DP,EAAID,SAAQ,SAACU,EAAWC,GACtB,KAAGA,EAtGiB,GAsGpB,CAEA,IAAMC,EAAOb,EAAUY,GACvBF,EAAsBlB,KAAK,CACzBqB,KAAM,IAAIC,KAAKD,GACfE,MAAOJ,cA9BTX,EAAYE,KAmCTH,GA+CMiB,EA5BK,SAACC,GACnBC,IAAMC,IAAI,CACRD,IAAME,IAAI,6CACVF,IAAME,IAAI,0CACVF,IAAME,IAAI,+CACTC,KAAKH,IAAMI,QAAO,SAACC,EAAmBC,EAAgBC,GACvD,IAAMC,EAAmB5B,EAAmBd,EAAauC,EAAkBtC,OACrE0C,EAAgB7B,EAAmBd,EAAawC,EAAevC,OAC/D2C,EAAmB9B,EAAmBd,EAAayC,EAAkBxC,OAIrE4C,EAAoC,GAC1CC,OAAOC,QAAQL,GAAkBzB,SAAQ,SAAC+B,GACxCH,EAAkCG,EAAM,IAAMF,OAAOG,KAAKD,EAAM,OAGlEf,EACES,EACAC,EACAC,EACAC,OAEAK,OAAM,SAAUvC,GAClBD,QAAQyC,IAAIxC,OC/JhB,SAASyC,EAAiBC,GAAQ,IACzBC,EAA8HD,EAA9HC,sBAAuBC,EAAuGF,EAAvGE,sBAAuBC,EAAgFH,EAAhFG,+BAAgCC,EAAgDJ,EAAhDI,sBAAuBC,EAAyBL,EAAzBK,sBAEtGC,EAAuBb,OAAOG,KAAKO,GAAgCI,OACnEC,EAA+C,MAAzBN,EACxB,GACAC,EAA+BD,GAAuBK,OAE1D,OACE,6BACI,4BAAQE,SAAUL,EAAuBM,MAAOR,GAAyB,IACvE,4BAAQS,IAAK,GAAID,MAAM,GAAGE,UAAQ,GAAlC,6BACCN,EAAqBO,KAAI,SAAC9C,GAAD,OAAmB,4BAAQ4C,IAAK5C,EAAe2C,MAAO3C,GAAgBA,OAGlG,4BAAQ0C,SAAUJ,EAAuBK,MAAOT,GAAyB,IACvE,4BAAQU,IAAK,GAAID,MAAM,GAAGE,UAAQ,GAAlC,6BACCJ,EAAoBK,KAAI,SAAC7C,GAAD,OAAmB,4BAAQ2C,IAAK3C,EAAe0C,MAAO1C,GAAgBA,QAM1F+B,QAEfA,EAAiBe,aAAe,CAC9Bb,sBAAuB,KACvBC,sBAAuB,MCqFVa,MA5Gf,WAAgB,IAAD,EAC6BC,mBAAS,MADtC,mBACNjD,EADM,KACSkD,EADT,OAE6BD,mBAAS,MAFtC,mBAENhD,EAFM,KAESkD,EAFT,OAG+DF,mBAAS,IAHxE,mBAGNb,EAHM,KAG0BgB,EAH1B,OAI+BH,oBAAS,GAJxC,mBAINI,EAJM,KAIUC,EAJV,OAMmCL,mBAAS,MAN5C,mBAMN3B,EANM,KAMYiC,EANZ,OAO6BN,mBAAS,MAPtC,mBAON1B,EAPM,KAOSiC,EAPT,OAQmCP,mBAAS,MAR5C,mBAQNzB,EARM,KAQYiC,EARZ,KA0Db,OA/CAC,qBAAU,WACR9C,GAAY,SAACU,EAAkBC,EAAeC,EAAkBC,GAC9D8B,EAAoBjC,GACpBkC,EAAiBjC,GACjBkC,EAAoBjC,GACpB4B,EAAkC3B,QAEnC,IAGHiC,qBAAU,WACR,GAAIpC,GAAqBC,GAAkBC,GAAqBY,EAAhE,CAIA,IAAMuB,EAAqB,SAAChE,EAASiE,EAAqBC,GACxD,IAAMC,EAAY,GAYlB,OAXApC,OAAOC,QAAQhC,GAASE,SAAQ,SAACkE,GAC/B,IAAM/D,EAAgB+D,EAAuB,GACvCC,EAAoBD,EAAuB,GACjDrC,OAAOC,QAAQqC,GAAmBnE,SAAQ,SAACoE,GACzC,IAAMhE,EAAgBgE,EAAuB,GACnBA,EAAuB,GAC/B5D,SAASR,SAAQ,SAACqE,GAClCJ,EAAU1E,KAAK,CAAEY,gBAAeC,cAAeA,EAAeQ,KAAM,IAAIC,KAAKwD,EAAazD,MAAOE,MAAOuD,EAAavD,iBAIpHmD,GAGTK,IAAO,kCACPA,IAAO,+BACPA,IAAO,kCAEP,IAAMC,EAAkB,qEACxBD,IAAO,0BAAD,OAA2BC,IACjCD,IAAO,uBAAD,OAAwBC,IAC9BD,IAAO,0BAAD,OAA2BC,IAEjCD,IAAOE,OAAOC,UAAUzF,KAAO8E,EAAmBrC,GAClD6C,IAAOE,OAAOE,OAAO1F,KAAO8E,EAAmBpC,GAC/C4C,IAAOE,OAAOG,UAAU3F,KAAO8E,EAAmBnC,GAElD8B,GAAkB,MACjB,CAACrD,EAAeD,EAAesB,EAAkBC,EAAeC,EAAkBY,IAEjFd,GAAqBC,GAAkBC,EA8BzC,yBAAKiD,UAAU,OACb,kBAAC,EAAD,CACEvC,sBAAuBjC,EACvBkC,sBAAuBnC,EACvBoC,+BAAgCA,EAChCC,sBAAuB,SAACqC,GACtBxB,EAAiBwB,EAAEC,OAAOhC,OAC1BQ,EAAiB,OAEnBb,sBAAuB,SAACoC,GACtBvB,EAAiBuB,EAAEC,OAAOhC,UAG9B,2BAvCmB,WACrB,GAAIU,EAAJ,CAEA,IAAIuB,EAAQ,0BACRC,EAAO,GACR7E,IACD4E,GAAS,2BACTC,EAAKzF,KAAKY,GAEPC,IACD2E,GAAS,yBACTC,EAAKzF,KAAKa,KAGd,IAAM6E,EAAcX,IAAOS,EAAOC,GAElC,OACE,oCAEIxB,EAAc,gBAAYyB,EAAYC,OAAxB,iBAAgD,oBAqB9DC,KA3CC,cC7DXC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.fa8d16c1.chunk.js","sourcesContent":["import axios from 'axios';\nimport csvParse from 'csv-parse';\n\nconst PROVINCE_STATE_COLUMN = 0;\nconst COUNTRY_REGION_COLUMN = 1;\nconst LATITUDE_COLUMN = 2;\nconst LONGITUDE_COLUMN = 3;\nconst FIRST_DATE_COLUMN = 4;\n\n/**\n * Parses CSV data and returns a 2D array\n * @param {string} data - CSV data in string form.\n * @returns {string[][]} A 2D array version of the input CSV data.\n * @returns {string[][]} A 2D array version of the input CSV data.\n */\nconst parseCsvData = (data) => {\n  const csvParser = csvParse();\n  const csvArr = [];\n\n  // Use the readable stream api\n  csvParser.on('readable', function(){\n    let record;\n    while ((record = csvParser.read())) {\n      csvArr.push(record)\n    }\n  });\n  // Catch any error\n  csvParser.on('error', function(err){\n    console.error(err.message)\n  });\n  // Send data to read to the stream\n  csvParser.write(data);\n\n  // Return the CSV as a 2D array\n  return csvArr;\n};\n\n/**\n * Parses a 2D array of CSV data and returns a dataset in our expected form.\n * Sample:\n * {\n *   \"US\": {\n *     \"New York\": {\n *       \"latitude\" : \"42.1657\",\n *       \"longitude\" : \"-74.9481\",\n *       \"dateData\" : [\n *         {\n *           \"date\" : Date object (e.g. Wed Jan 22 2020 00:00:00 GMT-0500 (Eastern Standard Time))\n *           \"cases\" : \"0\"\n *         },\n *         {\n *           \"date\" : Date object (e.g. Wed Jan 23 2020 00:00:00 GMT-0500 (Eastern Standard Time))\n *           \"cases\" : \"0\"\n *         },\n *         ...\n *       ]\n *     }\n *     \"California\": {\n *       \"latitude\" : \"36.1162\",\n *       \"longitude\" : \"-119.6816\",\n *       \"dateData\" : [\n *         {\n *           \"date\" : Date object (e.g. Wed Jan 22 2020 00:00:00 GMT-0500 (Eastern Standard Time))\n *           \"cases\" : \"0\"\n *         },\n *         {\n *           \"date\" : Date object (e.g. Wed Jan 23 2020 00:00:00 GMT-0500 (Eastern Standard Time))\n *           \"cases\" : \"0\"\n *         },\n *         ...\n *       ]\n *     }\n *   }\n * }\n * @param {string} csvArr - A 2D array of CSV data.\n * @returns {Object} A structured nested dataset.\n */\nconst csvToNestedDataset = (csvArr) => {\n  const dataset = {};\n\n  let headerRow = null;\n\n  csvArr.forEach((row, i) => {\n    if(i === 0) {\n      headerRow = row; // store header row\n      return;\n    }\n\n    const countryRegion = row[COUNTRY_REGION_COLUMN];\n    let provinceState = row[PROVINCE_STATE_COLUMN];\n\n    if(!countryRegion) return; // right now, we want to skip anything with a missing country/region\n    dataset[countryRegion] = dataset[countryRegion] || {};\n\n    const countryRegionData = dataset[countryRegion];\n\n    // When we encounter a countryRegion without a value for proviceState, use countryRegion as the\n    // provinceState value\n    if(!provinceState) { provinceState = countryRegion };\n\n    countryRegionData[provinceState] = countryRegionData[provinceState] || {\n      latitude: row[LATITUDE_COLUMN],\n      longitude: row[LONGITUDE_COLUMN],\n      dateData: []\n    };\n\n    const provinceStateDateData = countryRegionData[provinceState].dateData;\n\n    row.forEach((cellValue, j) => {\n      if(j < FIRST_DATE_COLUMN) return;\n\n      const date = headerRow[j];\n      provinceStateDateData.push({\n        date: new Date(date),\n        cases: cellValue\n      });\n    });\n  });\n\n  return dataset;\n};\n\n\n/**\n * Callback for retrieving dataset data.\n *\n * @callback datasetsCallback\n * @param {string[][]} confirmedDataset - Dataset describing confirmed cases of COVID-19.\n * @param {string[][]} deathsDataset - Dataset describing deaths from COVID-19.\n * @param {string[][]} recoveredDataset - Dataset describing recoveries from COVID-19.\n * @param {Object<string,string[]>} countryRegionsToProvinceStatesMap - Map of countryRegions to arrays of provinceStates.\n */\n\n/**\n * Retrieves the primary datasets for the my-corona app.\n *\n * @param {datasetsCallback} callback - A callback to run.\n */\nconst getDatasets = (callback) => {\n  axios.all([\n    axios.get('./data/time_series_19-covid-Confirmed.csv'),\n    axios.get('./data/time_series_19-covid-Deaths.csv'),\n    axios.get('./data/time_series_19-covid-Recovered.csv')\n  ]).then(axios.spread((confirmedResponse, deathsResponse, recoveredResponse) => {\n    const confirmedDataset = csvToNestedDataset(parseCsvData(confirmedResponse.data));\n    const deathsDataset = csvToNestedDataset(parseCsvData(deathsResponse.data));\n    const recoveredDataset = csvToNestedDataset(parseCsvData(recoveredResponse.data));\n\n    // provinceState to countryRegion mapping is derived from confirmed dataset, since it's the\n    // superset of locations in deaths and recovered datasets.\n    const countryRegionsToProvinceStatesMap = {};\n    Object.entries(confirmedDataset).forEach((entry) => {\n      countryRegionsToProvinceStatesMap[entry[0]] = Object.keys(entry[1]);\n    });\n\n    callback(\n      confirmedDataset,\n      deathsDataset,\n      recoveredDataset,\n      countryRegionsToProvinceStatesMap\n    );\n  })).catch(function (error) {\n    console.log(error);\n  });\n};\n\nexport default getDatasets;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction LocationSelector(props) {\n  const {selectedProvinceState, selectedCountryRegion, countryRegionsToProvinceStates, onCountryRegionChange, onProvinceStateChange} = props;\n\n  const countryRegionOptions = Object.keys(countryRegionsToProvinceStates).sort();\n  const proviceStateOptions = selectedCountryRegion == null\n    ? []\n    : countryRegionsToProvinceStates[selectedCountryRegion].sort();\n\n  return (\n    <div>\n        <select onChange={onCountryRegionChange} value={selectedCountryRegion || ''}>\n          <option key={''} value=\"\" disabled>Choose a country / region</option>\n          {countryRegionOptions.map((countryRegion) => <option key={countryRegion} value={countryRegion}>{countryRegion}</option> )}\n        </select>\n\n        <select onChange={onProvinceStateChange} value={selectedProvinceState || ''}>\n          <option key={''} value=\"\" disabled>Choose a province / state</option>\n          {proviceStateOptions.map((provinceState) => <option key={provinceState} value={provinceState}>{provinceState}</option> )}\n        </select>\n    </div>\n  );\n}\n\nexport default LocationSelector;\n\nLocationSelector.defaultProps = {\n  selectedProvinceState: null,\n  selectedCountryRegion: null,\n};\n\nLocationSelector.propTypes = {\n  onCountryRegionChange: PropTypes.func,\n  onProvinceStateChange: PropTypes.func,\n  selectedProvinceState: PropTypes.string,\n  selectedCountryRegion: PropTypes.string,\n  countryRegionsToProvinceStates: PropTypes.objectOf(PropTypes.any).isRequired,\n};\n","import React, { useEffect, useState } from 'react';\nimport alasql from 'alasql';\n\nimport './App.css';\nimport getDatasets from './getDatasets';\nimport LocationSelector from './components/LocationSelector';\n\nfunction App() {\n  const [countryRegion, setCountryRegion] = useState(null);\n  const [provinceState, setProvinceState] = useState(null);\n  const [countryRegionsToProvinceStates, setCountryRegionsToProvinceStates] = useState({});\n  const [sqlTableLoaded, setSqlTableLoaded] = useState(false);\n\n  const [confirmedDataset, setConfirmedDataset] = useState(null);\n  const [deathsDataset, setDeathsDataset] = useState(null);\n  const [recoveredDataset, setRecoveredDataset] = useState(null);\n\n  // Load datasets\n  useEffect(() => {\n    getDatasets((confirmedDataset, deathsDataset, recoveredDataset, countryRegionsToProvinceStatesMap) => {\n      setConfirmedDataset(confirmedDataset);\n      setDeathsDataset(deathsDataset);\n      setRecoveredDataset(recoveredDataset);\n      setCountryRegionsToProvinceStates(countryRegionsToProvinceStatesMap);\n    });\n  }, []);\n\n  // Run after every update of provinceState or countryRegion\n  useEffect(() => {\n    if(!confirmedDataset || !deathsDataset || !recoveredDataset || !countryRegionsToProvinceStates) {\n      return;\n    }\n\n    const datasetToTableData = (dataset, countryRegionFilter, provinceStateFilter) => {\n      const tableData = [];\n      Object.entries(dataset).forEach((countryRegionDataEntry) => {\n        const countryRegion = countryRegionDataEntry[0];\n        const provinceStateData = countryRegionDataEntry[1];\n        Object.entries(provinceStateData).forEach((provinceStateDataEntry) => {\n          const provinceState = provinceStateDataEntry[0];\n          const provinceStateData = provinceStateDataEntry[1];\n          provinceStateData.dateData.forEach((dateDataItem) => {\n            tableData.push({ countryRegion, provinceState: provinceState, date: new Date(dateDataItem.date), cases: dateDataItem.cases });\n          });\n        });\n      });\n      return tableData;\n    };\n\n    alasql(`DROP TABLE IF EXISTS confirmed`);\n    alasql(`DROP TABLE IF EXISTS deaths`);\n    alasql(`DROP TABLE IF EXISTS recovered`);\n\n    const columnStatement = '(provinceState STRING, countryRegion STRING, date DATE, cases INT)'; // using 'cases' here instead of 'count' to avoid SQL conflicts\n    alasql(`CREATE TABLE confirmed ${columnStatement}`);\n    alasql(`CREATE TABLE deaths ${columnStatement}`);\n    alasql(`CREATE TABLE recovered ${columnStatement}`);\n\n    alasql.tables.confirmed.data = datasetToTableData(confirmedDataset, countryRegion, provinceState);\n    alasql.tables.deaths.data = datasetToTableData(deathsDataset, countryRegion, provinceState);\n    alasql.tables.recovered.data = datasetToTableData(recoveredDataset, countryRegion, provinceState);\n\n    setSqlTableLoaded(true);\n  }, [provinceState, countryRegion, confirmedDataset, deathsDataset, recoveredDataset, countryRegionsToProvinceStates]);\n\n  if(!confirmedDataset || !deathsDataset || !recoveredDataset) {\n    return 'Loading...';\n  }\n\n  const renderDatasets = () => {\n    if(!sqlTableLoaded) return;\n\n    let query = 'SELECT * FROM confirmed';\n    let args = [];\n    if(countryRegion) {\n      query += ' WHERE countryRegion = ?'\n      args.push(countryRegion);\n\n      if(provinceState) {\n        query += ' AND provinceState = ?'\n        args.push(provinceState);\n      }\n    }\n    const queryResult = alasql(query, args);\n\n    return (\n      <>\n        {\n          sqlTableLoaded ? `Found ${queryResult.length} data points.` : 'Loading data...'\n        }\n      </>\n    );\n  };\n\n  return (\n    <div className=\"App\">\n      <LocationSelector\n        selectedProvinceState={provinceState}\n        selectedCountryRegion={countryRegion}\n        countryRegionsToProvinceStates={countryRegionsToProvinceStates}\n        onCountryRegionChange={(e) => {\n          setCountryRegion(e.target.value);\n          setProvinceState(null); // reset provinceState selection whenever a new countryRegion is selected\n        }}\n        onProvinceStateChange={(e) => {\n          setProvinceState(e.target.value);\n        }}\n      />\n      <p>\n        { renderDatasets() }\n      </p>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}