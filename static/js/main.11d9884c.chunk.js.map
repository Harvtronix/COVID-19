{"version":3,"sources":["modules/Colors.js","routes/__default__/charts/line/BasicLineChart.js","components/LocationSelector.js","routes/__default__/Home.js","routes/stats/Stats.js","App.js","index.js"],"names":["BasicLineChart","chartData","chartTitle","caseTypeConfig","style","fontSize","marginBottom","height","data","margin","top","right","left","bottom","strokeDasharray","dataKey","stroke","Colors","Object","entries","map","key","value","type","color","dot","fill","LocationSelector","props","selectedProvinceState","selectedCountryRegion","countryRegionsToProvinceStates","onCountryRegionChange","onProvinceStateChange","countryRegionOptions","keys","sort","proviceStateOptions","onChange","countryRegion","length","provinceState","defaultProps","Home","confirmed","deaths","recovered","useState","setCountryRegion","setProvinceState","sqlTablesLoaded","setSqlTablesLoaded","useEffect","createTableQuery","join","alasql","tables","cases","tableData","query","args","push","results","forEach","row","name","date","generateChartData","sortedCountryRegionsToProvinceStates","e","target","className","Stats","App","path","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.11d9884c.chunk.js","sourcesContent":["export default {\n  primary: '#e0e0e0',\n  lineConfirmed: '#7C55CA',\n  lineDeaths: '#396E6E',\n  lineRecovered: '#62A5E5'\n}\n","import React from 'react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport Colors from '../../../../modules/Colors';\n\nconst BasicLineChart = ({chartData, chartTitle, caseTypeConfig}) => {\n  return (\n    <>\n    <h1 style={{fontSize: '2em', marginBottom: '.5em'}}>{chartTitle}</h1>\n    <ResponsiveContainer height={400}>\n      <LineChart\n          data={chartData}\n          margin={{\n            top: 5, right: 30, left: 20, bottom: 5,\n          }}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"name\" stroke={Colors.primary} />\n          <YAxis stroke={Colors.primary} />\n          <Tooltip />\n          <Legend stroke={Colors.primary} />\n          {\n            Object.entries(caseTypeConfig).map(([key, value]) => (\n              <Line\n                type=\"monotone\"\n                dataKey={key}\n                stroke={value.color}\n                dot={{\n                  fill: value.color\n                }}\n                key={key}\n              />\n            ))\n          }\n        </LineChart>\n      </ResponsiveContainer>\n    </>\n  );\n};\n\nexport default BasicLineChart;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction LocationSelector(props) {\n  const {selectedProvinceState, selectedCountryRegion, countryRegionsToProvinceStates, onCountryRegionChange, onProvinceStateChange} = props;\n\n  const countryRegionOptions = Object.keys(countryRegionsToProvinceStates).sort();\n  const proviceStateOptions = selectedCountryRegion == null\n    ? []\n    : countryRegionsToProvinceStates[selectedCountryRegion].sort();\n\n  return (\n    <div style={{marginBottom: '1em'}}>\n        <select\n          onChange={onCountryRegionChange}\n          value={selectedCountryRegion || ''}\n          style={{margin: '1rem'}}\n        >\n          <option key={''} value=\"\">- All Regions -</option>\n          {countryRegionOptions.map((countryRegion) => <option key={countryRegion} value={countryRegion}>{countryRegion}</option> )}\n        </select>\n\n        <select onChange={onProvinceStateChange} value={selectedProvinceState || ''} style={{margin: '1rem'}}>\n          <option key={''} value=\"\">- All Subregions -</option>\n          {proviceStateOptions.length > 1 && proviceStateOptions.map((provinceState) => <option key={provinceState} value={provinceState}>{provinceState}</option> )}\n        </select>\n    </div>\n  );\n}\n\nexport default LocationSelector;\n\nLocationSelector.defaultProps = {\n  selectedProvinceState: null,\n  selectedCountryRegion: null,\n};\n\nLocationSelector.propTypes = {\n  onCountryRegionChange: PropTypes.func,\n  onProvinceStateChange: PropTypes.func,\n  selectedProvinceState: PropTypes.string,\n  selectedCountryRegion: PropTypes.string,\n  countryRegionsToProvinceStates: PropTypes.objectOf(PropTypes.any).isRequired,\n};\n","import React, { useEffect, useState } from 'react';\nimport alasql from 'alasql';\n\n\nimport BasicLineChart from './charts/line/BasicLineChart';\nimport LocationSelector from '../../components/LocationSelector';\nimport Colors from '../../modules/Colors';\nimport tableData from '../../data/tableData.json';\nimport sortedCountryRegionsToProvinceStates from '../../data/sortedCountryRegionsToProvinceStates.json';\n\nconst Home = () => {\n  const casesTableName = 'cases';\n  const caseTypeConfig = {\n    confirmed: {\n      color: Colors.lineConfirmed\n    },\n    deaths: {\n      color: Colors.lineDeaths\n    },\n    recovered: {\n      color: Colors.lineRecovered\n    }\n  };\n\n  const [countryRegion, setCountryRegion] = useState(null);\n  const [provinceState, setProvinceState] = useState(null);\n  const [sqlTablesLoaded, setSqlTablesLoaded] = useState(false);\n\n  // Load datasets\n  useEffect(() => {\n    const createTableQuery = `\n      CREATE TABLE ${casesTableName} (\n        provinceState STRING,\n        countryRegion STRING,\n        date DATE,\n        ${Object.keys(caseTypeConfig).map((type) => `${type} INT`).join(', ')}\n      )\n    `;\n    alasql(createTableQuery);\n    alasql.tables.cases.data = tableData;\n    setSqlTablesLoaded(true);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  if(!sqlTablesLoaded) {\n    return 'Loading...';\n  }\n\n  const generateChartData = () => {\n    let query = `\n      SELECT date,\n      ${Object.keys(caseTypeConfig).map((type) => `sum(${type}) as ${type}`).join(', ')}\n      FROM ${casesTableName}\n    `;\n    let args = [];\n    if(countryRegion) {\n      query += ' WHERE countryRegion = ?'\n      args.push(countryRegion);\n\n      if(provinceState) {\n        query += ' AND provinceState = ?'\n        args.push(provinceState);\n      }\n    }\n    query += ' GROUP BY date ORDER BY date ASC';\n    const results = alasql(query, args);\n    results.forEach((row) => {\n      // Move 'date' property to 'name'\n      row.name = row.date;\n      delete row.date;\n    });\n    return results;\n  };\n\n  const chartData = generateChartData();\n\n  let chartTitle = 'COVID-19 Cases: ';\n  if(provinceState || countryRegion) {\n    chartTitle += (provinceState ? ` ${provinceState},` : '')\n      + (countryRegion ? ` ${countryRegion}` : '');\n  } else {\n    chartTitle += 'Global';\n  }\n\n  return (\n    <>\n      <LocationSelector\n        selectedProvinceState={provinceState}\n        selectedCountryRegion={countryRegion}\n        countryRegionsToProvinceStates={sortedCountryRegionsToProvinceStates}\n        onCountryRegionChange={(e) => {\n          setCountryRegion(e.target.value === '' ? null : e.target.value);\n          setProvinceState(null); // reset provinceState selection whenever a new countryRegion is selected\n        }}\n        onProvinceStateChange={(e) => {\n          setProvinceState(e.target.value === '' ? null : e.target.value);\n        }}\n      />\n      <div className=\"LineChartContainer\">\n        {\n          <BasicLineChart chartTitle={chartTitle} chartData={chartData} caseTypeConfig={caseTypeConfig} />\n        }\n      </div>\n    </>\n  )\n}\n\nexport default Home;\n","import React from 'react'\n\nconst Stats = () => {\n    return (\n        <div>\n            secound route for stats!\n        </div>\n    )\n}\n\nexport default Stats\n","import React from 'react';\nimport { HashRouter, Switch, Route } from 'react-router-dom';\n\nimport './App.css';\n\nimport Home from './routes/__default__/Home';\nimport Stats from './routes/stats/Stats';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <HashRouter>\n        <Switch>\n          <Route path=\"/stats\" component={Stats} />\n          <Route path=\"/\" component={Home} />\n        </Switch>\n      </HashRouter>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}