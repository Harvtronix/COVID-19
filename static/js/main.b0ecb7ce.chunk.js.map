{"version":3,"sources":["modules/getDatasets.js","components/charts/line/BasicLineChart.js","components/LocationSelector.js","App.js","index.js"],"names":["parseCsvData","data","csvParser","csvParse","csvArr","on","record","read","push","err","console","error","message","write","csvToNestedDataset","dataset","headerRow","forEach","row","i","countryRegion","provinceState","countryRegionData","latitude","longitude","dateData","provinceStateDateData","cellValue","j","date","Date","cases","parseInt","getDatasets","callback","noCacheAxios","axios","create","headers","all","get","then","spread","confirmedResponse","deathsResponse","recoveredResponse","confirmedDataset","deathsDataset","recoveredDataset","countryRegionsToProvinceStatesMap","Object","entries","entry","keys","catch","log","BasicLineChart","queryResult","labels","datasets","map","setKey","set","value","label","options","tooltip","customHTML","arg","LocationSelector","props","selectedProvinceState","selectedCountryRegion","countryRegionsToProvinceStates","onCountryRegionChange","onProvinceStateChange","countryRegionOptions","sort","proviceStateOptions","onChange","key","defaultProps","App","dataTableNames","useState","setCountryRegion","setProvinceState","setCountryRegionsToProvinceStates","sqlTablesLoaded","setSqlTablesLoaded","useEffect","datasetToTableData","tableData","countryRegionDataEntry","provinceStateData","provinceStateDataEntry","dateDataItem","tableName","alasql","tables","confirmed","deaths","recovered","queryData","query","args","confirmedQueryResult","deathsQueryResult","recoveredQueryResult","queryDateCounts","className","e","target","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b0ecb7ce.chunk.js","sourcesContent":["import axios from 'axios';\nimport csvParse from 'csv-parse';\n\nconst PROVINCE_STATE_COLUMN = 0;\nconst COUNTRY_REGION_COLUMN = 1;\nconst LATITUDE_COLUMN = 2;\nconst LONGITUDE_COLUMN = 3;\nconst FIRST_DATE_COLUMN = 4;\n\n/**\n * Parses CSV data and returns a 2D array\n * @param {string} data - CSV data in string form.\n * @returns {string[][]} A 2D array version of the input CSV data.\n * @returns {string[][]} A 2D array version of the input CSV data.\n */\nconst parseCsvData = (data) => {\n  const csvParser = csvParse();\n  const csvArr = [];\n\n  // Use the readable stream api\n  csvParser.on('readable', function(){\n    let record;\n    while ((record = csvParser.read())) {\n      csvArr.push(record)\n    }\n  });\n  // Catch any error\n  csvParser.on('error', function(err){\n    console.error(err.message)\n  });\n  // Send data to read to the stream\n  csvParser.write(data);\n\n  // Return the CSV as a 2D array\n  return csvArr;\n};\n\n/**\n * Parses a 2D array of CSV data and returns a dataset in our expected form.\n * Sample:\n * {\n *   \"US\": {\n *     \"New York\": {\n *       \"latitude\" : \"42.1657\",\n *       \"longitude\" : \"-74.9481\",\n *       \"dateData\" : [\n *         {\n *           \"date\" : Date object (e.g. Wed Jan 22 2020 00:00:00 GMT-0500 (Eastern Standard Time))\n *           \"cases\" : \"0\"\n *         },\n *         {\n *           \"date\" : Date object (e.g. Wed Jan 23 2020 00:00:00 GMT-0500 (Eastern Standard Time))\n *           \"cases\" : \"0\"\n *         },\n *         ...\n *       ]\n *     }\n *     \"California\": {\n *       \"latitude\" : \"36.1162\",\n *       \"longitude\" : \"-119.6816\",\n *       \"dateData\" : [\n *         {\n *           \"date\" : Date object (e.g. Wed Jan 22 2020 00:00:00 GMT-0500 (Eastern Standard Time))\n *           \"cases\" : \"0\"\n *         },\n *         {\n *           \"date\" : Date object (e.g. Wed Jan 23 2020 00:00:00 GMT-0500 (Eastern Standard Time))\n *           \"cases\" : \"0\"\n *         },\n *         ...\n *       ]\n *     }\n *   }\n * }\n * @param {string} csvArr - A 2D array of CSV data.\n * @returns {Object} A structured nested dataset.\n */\nconst csvToNestedDataset = (csvArr) => {\n  const dataset = {};\n\n  let headerRow = null;\n\n  csvArr.forEach((row, i) => {\n    if(i === 0) {\n      headerRow = row; // store header row\n      return;\n    }\n\n    const countryRegion = row[COUNTRY_REGION_COLUMN];\n    let provinceState = row[PROVINCE_STATE_COLUMN];\n\n    if(!countryRegion) return; // right now, we want to skip anything with a missing country/region\n    dataset[countryRegion] = dataset[countryRegion] || {};\n\n    const countryRegionData = dataset[countryRegion];\n\n    // When we encounter a countryRegion without a value for proviceState, use countryRegion as the\n    // provinceState value\n    if(!provinceState) { provinceState = countryRegion };\n\n    countryRegionData[provinceState] = countryRegionData[provinceState] || {\n      latitude: row[LATITUDE_COLUMN],\n      longitude: row[LONGITUDE_COLUMN],\n      dateData: []\n    };\n\n    const provinceStateDateData = countryRegionData[provinceState].dateData;\n\n    row.forEach((cellValue, j) => {\n      if(j < FIRST_DATE_COLUMN) return;\n\n      const date = headerRow[j];\n      provinceStateDateData.push({\n        date: new Date(date),\n        cases: parseInt(cellValue)\n      });\n    });\n  });\n\n  return dataset;\n};\n\n\n/**\n * Callback for retrieving dataset data.\n *\n * @callback datasetsCallback\n * @param {string[][]} confirmedDataset - Dataset describing confirmed cases of COVID-19.\n * @param {string[][]} deathsDataset - Dataset describing deaths from COVID-19.\n * @param {string[][]} recoveredDataset - Dataset describing recoveries from COVID-19.\n * @param {Object<string,string[]>} countryRegionsToProvinceStatesMap - Map of countryRegions to arrays of provinceStates.\n */\n\n/**\n * Retrieves the primary datasets for the my-corona app.\n *\n * @param {datasetsCallback} callback - A callback to run.\n */\nconst getDatasets = (callback) => {\n  const noCacheAxios = axios.create({\n    headers: {'Cache-Control': 'no-cache'}\n  });\n\n  axios.all([\n    noCacheAxios.get('./data/time_series_19-covid-Confirmed.csv'),\n    noCacheAxios.get('./data/time_series_19-covid-Deaths.csv'),\n    noCacheAxios.get('./data/time_series_19-covid-Recovered.csv')\n  ]).then(axios.spread((confirmedResponse, deathsResponse, recoveredResponse) => {\n    const confirmedDataset = csvToNestedDataset(parseCsvData(confirmedResponse.data));\n    const deathsDataset = csvToNestedDataset(parseCsvData(deathsResponse.data));\n    const recoveredDataset = csvToNestedDataset(parseCsvData(recoveredResponse.data));\n\n    // provinceState to countryRegion mapping is derived from confirmed dataset, since it's the\n    // superset of locations in deaths and recovered datasets.\n    const countryRegionsToProvinceStatesMap = {};\n    Object.entries(confirmedDataset).forEach((entry) => {\n      countryRegionsToProvinceStatesMap[entry[0]] = Object.keys(entry[1]);\n    });\n\n    callback(\n      confirmedDataset,\n      deathsDataset,\n      recoveredDataset,\n      countryRegionsToProvinceStatesMap\n    );\n  })).catch(function (error) {\n    console.log(error);\n  });\n};\n\nexport default getDatasets;\n","import React from \"react\";\n\nimport { LineChart } from \"@carbon/charts-react\";\nimport \"@carbon/charts/styles.css\";\n\nconst BasicLineChart = ({queryResult}) => {\n\n  let datasets = Object.keys(queryResult).map((setKey) => {\n    let set = queryResult[setKey]\n\n    for (let entry of set) {\n      entry.value = entry.cases\n    }\n\n    return {\n      label: setKey,\n      data: set\n    }\n  })\n\n  let data = {\n    labels: [\n      \"Qty\",\n      \"More\",\n      \"Sold\",\n      \"Restocking\",\n      \"Misc\"\n    ],\n    datasets\n  }\n\n  let options = {\n    \"title\": \"Line (time series)\",\n    \"axes\": {\n      \"left\": {\n        \"secondary\": true\n      },\n      \"bottom\": {\n        \"scaleType\": \"time\",\n        \"primary\": true\n      }\n    },\n    \"curve\": \"curveMonotoneX\",\n    \"height\": \"5in\",\n    tooltip: {\n      customHTML: function (arg) {\n        if ('date' in arg && 'value' in arg) {\n          return `\n          <div class=\"datapoint-tooltip\">\n            <a style=\"background-color:#000\" class=\"tooltip-color\"></a>\n            <p class=\"label\">${arg.date}</p>\n            <p class=\"value\">${arg.value}</p>\n          </div>\n          `\n        } else {\n          return null\n        }\n      }\n    }\n  }\n\n  return (\n    <LineChart data={data} options={options} />\n    )\n  }\n\n  export default BasicLineChart\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction LocationSelector(props) {\n  const {selectedProvinceState, selectedCountryRegion, countryRegionsToProvinceStates, onCountryRegionChange, onProvinceStateChange} = props;\n\n  const countryRegionOptions = Object.keys(countryRegionsToProvinceStates).sort();\n  const proviceStateOptions = selectedCountryRegion == null\n    ? []\n    : countryRegionsToProvinceStates[selectedCountryRegion].sort();\n\n  return (\n    <div>\n        <select onChange={onCountryRegionChange} value={selectedCountryRegion || ''}>\n          <option key={''} value=\"\">- All Regions -</option>\n          {countryRegionOptions.map((countryRegion) => <option key={countryRegion} value={countryRegion}>{countryRegion}</option> )}\n        </select>\n\n        <select onChange={onProvinceStateChange} value={selectedProvinceState || ''}>\n          <option key={''} value=\"\">- All Subregions -</option>\n          {proviceStateOptions.map((provinceState) => <option key={provinceState} value={provinceState}>{provinceState}</option> )}\n        </select>\n    </div>\n  );\n}\n\nexport default LocationSelector;\n\nLocationSelector.defaultProps = {\n  selectedProvinceState: null,\n  selectedCountryRegion: null,\n};\n\nLocationSelector.propTypes = {\n  onCountryRegionChange: PropTypes.func,\n  onProvinceStateChange: PropTypes.func,\n  selectedProvinceState: PropTypes.string,\n  selectedCountryRegion: PropTypes.string,\n  countryRegionsToProvinceStates: PropTypes.objectOf(PropTypes.any).isRequired,\n};\n","import React, { useEffect, useState } from 'react';\nimport alasql from 'alasql';\n\nimport './App.css';\nimport getDatasets from './modules/getDatasets';\nimport BasicLineChart from './components/charts/line/BasicLineChart';\nimport LocationSelector from './components/LocationSelector';\n\nfunction App() {\n  const dataTableNames = ['confirmed', 'deaths', 'recovered'];\n\n  const [countryRegion, setCountryRegion] = useState(null);\n  const [provinceState, setProvinceState] = useState(null);\n  const [countryRegionsToProvinceStates, setCountryRegionsToProvinceStates] = useState({});\n  const [sqlTablesLoaded, setSqlTablesLoaded] = useState(false);\n\n  // Load datasets\n  useEffect(() => {\n    getDatasets((confirmedDataset, deathsDataset, recoveredDataset, countryRegionsToProvinceStatesMap) => {\n      const datasetToTableData = (dataset) => {\n        const tableData = [];\n        Object.entries(dataset).forEach((countryRegionDataEntry) => {\n          const countryRegion = countryRegionDataEntry[0];\n          const provinceStateData = countryRegionDataEntry[1];\n          Object.entries(provinceStateData).forEach((provinceStateDataEntry) => {\n            const provinceState = provinceStateDataEntry[0];\n            const provinceStateData = provinceStateDataEntry[1];\n            provinceStateData.dateData.forEach((dateDataItem) => {\n              tableData.push({ countryRegion, provinceState: provinceState, date: new Date(dateDataItem.date), cases: dateDataItem.cases });\n            });\n          });\n        });\n        return tableData;\n      };\n\n      const columnStatement = '(provinceState STRING, countryRegion STRING, date DATE, cases INT)'; // using 'cases' here instead of 'count' to avoid SQL conflicts\n      dataTableNames.forEach((tableName) => {\n        alasql(`CREATE TABLE ${tableName} ${columnStatement}`);\n      });\n\n      alasql.tables.confirmed.data = datasetToTableData(confirmedDataset);\n      alasql.tables.deaths.data = datasetToTableData(deathsDataset);\n      alasql.tables.recovered.data = datasetToTableData(recoveredDataset);\n\n      setCountryRegionsToProvinceStates(countryRegionsToProvinceStatesMap);\n      setSqlTablesLoaded(true);\n    });\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  if(!sqlTablesLoaded) {\n    return 'Loading...';\n  }\n\n  const queryDateCounts = () => {\n    const [confirmedQueryResult, deathsQueryResult, recoveredQueryResult] = dataTableNames.map((tableName) => {\n      let query = `SELECT date, sum(cases) as cases FROM ${tableName}`;\n      let args = [];\n      if(countryRegion) {\n        query += ' WHERE countryRegion = ?'\n        args.push(countryRegion);\n\n        if(provinceState) {\n          query += ' AND provinceState = ?'\n          args.push(provinceState);\n        }\n      }\n      query += ' GROUP BY date ORDER BY date ASC';\n      return alasql(query, args);\n    });\n\n    return {\n      confirmedQueryResult,\n      deathsQueryResult,\n      recoveredQueryResult\n    }\n  };\n\n  const queryData = queryDateCounts();\n\n  return (\n    <div className=\"App\">\n      <LocationSelector\n        selectedProvinceState={provinceState}\n        selectedCountryRegion={countryRegion}\n        countryRegionsToProvinceStates={countryRegionsToProvinceStates}\n        onCountryRegionChange={(e) => {\n          setCountryRegion(e.target.value === '' ? null : e.target.value);\n          setProvinceState(null); // reset provinceState selection whenever a new countryRegion is selected\n        }}\n        onProvinceStateChange={(e) => {\n          setProvinceState(e.target.value === '' ? null : e.target.value);\n        }}\n      />\n      <div className=\"LineChartContainer\">\n        {\n          <BasicLineChart queryResult={queryData} />\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}