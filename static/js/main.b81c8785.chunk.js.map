{"version":3,"sources":["modules/getDatasets.js","components/charts/line/BasicLineChart.js","components/LocationSelector.js","App.js","index.js"],"names":["parseCsvData","data","csvParser","csvParse","csvArr","on","record","read","push","err","console","error","message","write","csvToNestedDataset","dataset","headerRow","forEach","row","i","countryRegion","provinceState","countryRegionData","latitude","longitude","dateData","provinceStateDateData","cellValue","j","date","Date","cases","parseInt","getDatasets","callback","axios","all","get","then","spread","confirmedResponse","deathsResponse","recoveredResponse","confirmedDataset","deathsDataset","recoveredDataset","countryRegionsToProvinceStatesMap","Object","entries","entry","keys","catch","log","BasicLineChart","queryResult","labels","datasets","map","setKey","set","value","label","options","LocationSelector","props","selectedProvinceState","selectedCountryRegion","countryRegionsToProvinceStates","onCountryRegionChange","onProvinceStateChange","countryRegionOptions","sort","proviceStateOptions","onChange","key","disabled","defaultProps","App","dataTableNames","useState","setCountryRegion","setProvinceState","setCountryRegionsToProvinceStates","sqlTableLoaded","setSqlTableLoaded","setConfirmedDataset","setDeathsDataset","setRecoveredDataset","useEffect","datasetToTableData","countryRegionFilter","provinceStateFilter","tableData","countryRegionDataEntry","provinceStateData","provinceStateDataEntry","dateDataItem","tableName","alasql","tables","confirmed","deaths","recovered","queryData","query","args","confirmedQueryResult","deathsQueryResult","recoveredQueryResult","className","e","target","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b81c8785.chunk.js","sourcesContent":["import axios from 'axios';\nimport csvParse from 'csv-parse';\n\nconst PROVINCE_STATE_COLUMN = 0;\nconst COUNTRY_REGION_COLUMN = 1;\nconst LATITUDE_COLUMN = 2;\nconst LONGITUDE_COLUMN = 3;\nconst FIRST_DATE_COLUMN = 4;\n\n/**\n * Parses CSV data and returns a 2D array\n * @param {string} data - CSV data in string form.\n * @returns {string[][]} A 2D array version of the input CSV data.\n * @returns {string[][]} A 2D array version of the input CSV data.\n */\nconst parseCsvData = (data) => {\n  const csvParser = csvParse();\n  const csvArr = [];\n\n  // Use the readable stream api\n  csvParser.on('readable', function(){\n    let record;\n    while ((record = csvParser.read())) {\n      csvArr.push(record)\n    }\n  });\n  // Catch any error\n  csvParser.on('error', function(err){\n    console.error(err.message)\n  });\n  // Send data to read to the stream\n  csvParser.write(data);\n\n  // Return the CSV as a 2D array\n  return csvArr;\n};\n\n/**\n * Parses a 2D array of CSV data and returns a dataset in our expected form.\n * Sample:\n * {\n *   \"US\": {\n *     \"New York\": {\n *       \"latitude\" : \"42.1657\",\n *       \"longitude\" : \"-74.9481\",\n *       \"dateData\" : [\n *         {\n *           \"date\" : Date object (e.g. Wed Jan 22 2020 00:00:00 GMT-0500 (Eastern Standard Time))\n *           \"cases\" : \"0\"\n *         },\n *         {\n *           \"date\" : Date object (e.g. Wed Jan 23 2020 00:00:00 GMT-0500 (Eastern Standard Time))\n *           \"cases\" : \"0\"\n *         },\n *         ...\n *       ]\n *     }\n *     \"California\": {\n *       \"latitude\" : \"36.1162\",\n *       \"longitude\" : \"-119.6816\",\n *       \"dateData\" : [\n *         {\n *           \"date\" : Date object (e.g. Wed Jan 22 2020 00:00:00 GMT-0500 (Eastern Standard Time))\n *           \"cases\" : \"0\"\n *         },\n *         {\n *           \"date\" : Date object (e.g. Wed Jan 23 2020 00:00:00 GMT-0500 (Eastern Standard Time))\n *           \"cases\" : \"0\"\n *         },\n *         ...\n *       ]\n *     }\n *   }\n * }\n * @param {string} csvArr - A 2D array of CSV data.\n * @returns {Object} A structured nested dataset.\n */\nconst csvToNestedDataset = (csvArr) => {\n  const dataset = {};\n\n  let headerRow = null;\n\n  csvArr.forEach((row, i) => {\n    if(i === 0) {\n      headerRow = row; // store header row\n      return;\n    }\n\n    const countryRegion = row[COUNTRY_REGION_COLUMN];\n    let provinceState = row[PROVINCE_STATE_COLUMN];\n\n    if(!countryRegion) return; // right now, we want to skip anything with a missing country/region\n    dataset[countryRegion] = dataset[countryRegion] || {};\n\n    const countryRegionData = dataset[countryRegion];\n\n    // When we encounter a countryRegion without a value for proviceState, use countryRegion as the\n    // provinceState value\n    if(!provinceState) { provinceState = countryRegion };\n\n    countryRegionData[provinceState] = countryRegionData[provinceState] || {\n      latitude: row[LATITUDE_COLUMN],\n      longitude: row[LONGITUDE_COLUMN],\n      dateData: []\n    };\n\n    const provinceStateDateData = countryRegionData[provinceState].dateData;\n\n    row.forEach((cellValue, j) => {\n      if(j < FIRST_DATE_COLUMN) return;\n\n      const date = headerRow[j];\n      provinceStateDateData.push({\n        date: new Date(date),\n        cases: parseInt(cellValue)\n      });\n    });\n  });\n\n  return dataset;\n};\n\n\n/**\n * Callback for retrieving dataset data.\n *\n * @callback datasetsCallback\n * @param {string[][]} confirmedDataset - Dataset describing confirmed cases of COVID-19.\n * @param {string[][]} deathsDataset - Dataset describing deaths from COVID-19.\n * @param {string[][]} recoveredDataset - Dataset describing recoveries from COVID-19.\n * @param {Object<string,string[]>} countryRegionsToProvinceStatesMap - Map of countryRegions to arrays of provinceStates.\n */\n\n/**\n * Retrieves the primary datasets for the my-corona app.\n *\n * @param {datasetsCallback} callback - A callback to run.\n */\nconst getDatasets = (callback) => {\n  axios.all([\n    axios.get('./data/time_series_19-covid-Confirmed.csv'),\n    axios.get('./data/time_series_19-covid-Deaths.csv'),\n    axios.get('./data/time_series_19-covid-Recovered.csv')\n  ]).then(axios.spread((confirmedResponse, deathsResponse, recoveredResponse) => {\n    const confirmedDataset = csvToNestedDataset(parseCsvData(confirmedResponse.data));\n    const deathsDataset = csvToNestedDataset(parseCsvData(deathsResponse.data));\n    const recoveredDataset = csvToNestedDataset(parseCsvData(recoveredResponse.data));\n\n    // provinceState to countryRegion mapping is derived from confirmed dataset, since it's the\n    // superset of locations in deaths and recovered datasets.\n    const countryRegionsToProvinceStatesMap = {};\n    Object.entries(confirmedDataset).forEach((entry) => {\n      countryRegionsToProvinceStatesMap[entry[0]] = Object.keys(entry[1]);\n    });\n\n    callback(\n      confirmedDataset,\n      deathsDataset,\n      recoveredDataset,\n      countryRegionsToProvinceStatesMap\n    );\n  })).catch(function (error) {\n    console.log(error);\n  });\n};\n\nexport default getDatasets;\n","import React from \"react\";\n\nimport { LineChart } from \"@carbon/charts-react\";\nimport \"@carbon/charts/styles.css\";\n\nconst BasicLineChart = ({queryResult}) => {\n\n  let datasets = Object.keys(queryResult).map((setKey) => {\n    let set = queryResult[setKey]\n\n    for (let entry of set) {\n      entry.value = entry.cases\n    }\n\n    return {\n      label: setKey,\n      data: set\n    }\n  })\n\n  let data = {\n    labels: [\n      \"Qty\",\n      \"More\",\n      \"Sold\",\n      \"Restocking\",\n      \"Misc\"\n    ],\n    datasets\n    // \"datasets\": [\n    //     {\n    //         \"label\": \"Dataset 1\",\n    //         \"data\": [\n    //             {\n    //                 \"date\": \"2019-01-01T05:00:00.000Z\",\n    //                 \"value\": 10000\n    //             },\n    //             {\n    //                 \"date\": \"2019-01-05T05:00:00.000Z\",\n    //                 \"value\": 65000\n    //             },\n    //             {\n    //                 \"date\": \"2019-01-08T05:00:00.000Z\",\n    //                 \"value\": null\n    //             },\n    //             {\n    //                 \"date\": \"2019-01-13T05:00:00.000Z\",\n    //                 \"value\": 49213\n    //             },\n    //             {\n    //                 \"date\": \"2019-01-17T05:00:00.000Z\",\n    //                 \"value\": 51213\n    //             }\n    //         ]\n    //     },\n    //     {\n    //         \"label\": \"Dataset 2\",\n    //         \"data\": [\n    //             {\n    //                 \"date\": \"2019-01-02T05:00:00.000Z\",\n    //                 \"value\": 0\n    //             },\n    //             {\n    //                 \"date\": \"2019-01-06T05:00:00.000Z\",\n    //                 \"value\": 57312\n    //             },\n    //             {\n    //                 \"date\": \"2019-01-08T05:00:00.000Z\",\n    //                 \"value\": 21432\n    //             },\n    //             {\n    //                 \"date\": \"2019-01-15T05:00:00.000Z\",\n    //                 \"value\": 70323\n    //             },\n    //             {\n    //                 \"date\": \"2019-01-19T05:00:00.000Z\",\n    //                 \"value\": 21300\n    //             }\n    //         ]\n    //     }\n    // ]\n  }\n\n  let options = {\n    \"title\": \"Line (time series)\",\n    \"axes\": {\n      \"left\": {\n        \"secondary\": true\n      },\n      \"bottom\": {\n        \"scaleType\": \"time\",\n        \"primary\": true\n      }\n    },\n    \"curve\": \"curveMonotoneX\",\n    \"height\": \"400px\"\n  }\n\n  return (\n    <LineChart data={data} options={options} />\n    )\n  }\n\n  export default BasicLineChart\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction LocationSelector(props) {\n  const {selectedProvinceState, selectedCountryRegion, countryRegionsToProvinceStates, onCountryRegionChange, onProvinceStateChange} = props;\n\n  const countryRegionOptions = Object.keys(countryRegionsToProvinceStates).sort();\n  const proviceStateOptions = selectedCountryRegion == null\n    ? []\n    : countryRegionsToProvinceStates[selectedCountryRegion].sort();\n\n  return (\n    <div>\n        <select onChange={onCountryRegionChange} value={selectedCountryRegion || ''}>\n          <option key={''} value=\"\" disabled>Choose a country / region</option>\n          {countryRegionOptions.map((countryRegion) => <option key={countryRegion} value={countryRegion}>{countryRegion}</option> )}\n        </select>\n\n        <select onChange={onProvinceStateChange} value={selectedProvinceState || ''}>\n          <option key={''} value=\"\" disabled>Choose a province / state</option>\n          {proviceStateOptions.map((provinceState) => <option key={provinceState} value={provinceState}>{provinceState}</option> )}\n        </select>\n    </div>\n  );\n}\n\nexport default LocationSelector;\n\nLocationSelector.defaultProps = {\n  selectedProvinceState: null,\n  selectedCountryRegion: null,\n};\n\nLocationSelector.propTypes = {\n  onCountryRegionChange: PropTypes.func,\n  onProvinceStateChange: PropTypes.func,\n  selectedProvinceState: PropTypes.string,\n  selectedCountryRegion: PropTypes.string,\n  countryRegionsToProvinceStates: PropTypes.objectOf(PropTypes.any).isRequired,\n};\n","import React, { useEffect, useState } from 'react';\nimport alasql from 'alasql';\n\nimport './App.css';\nimport getDatasets from './modules/getDatasets';\nimport BasicLineChart from './components/charts/line/BasicLineChart';\nimport LocationSelector from './components/LocationSelector';\n\nfunction App() {\n  const dataTableNames = ['confirmed', 'deaths', 'recovered'];\n\n  const [countryRegion, setCountryRegion] = useState(null);\n  const [provinceState, setProvinceState] = useState(null);\n  const [countryRegionsToProvinceStates, setCountryRegionsToProvinceStates] = useState({});\n  const [sqlTableLoaded, setSqlTableLoaded] = useState(false);\n\n  const [confirmedDataset, setConfirmedDataset] = useState(null);\n  const [deathsDataset, setDeathsDataset] = useState(null);\n  const [recoveredDataset, setRecoveredDataset] = useState(null);\n\n  // Load datasets\n  useEffect(() => {\n    getDatasets((confirmedDataset, deathsDataset, recoveredDataset, countryRegionsToProvinceStatesMap) => {\n      setConfirmedDataset(confirmedDataset);\n      setDeathsDataset(deathsDataset);\n      setRecoveredDataset(recoveredDataset);\n      setCountryRegionsToProvinceStates(countryRegionsToProvinceStatesMap);\n    });\n  }, []);\n\n  // Run after every update of provinceState or countryRegion\n  useEffect(() => {\n    if(!confirmedDataset || !deathsDataset || !recoveredDataset || !countryRegionsToProvinceStates) {\n      return;\n    }\n\n    const datasetToTableData = (dataset, countryRegionFilter, provinceStateFilter) => {\n      const tableData = [];\n      Object.entries(dataset).forEach((countryRegionDataEntry) => {\n        const countryRegion = countryRegionDataEntry[0];\n        const provinceStateData = countryRegionDataEntry[1];\n        Object.entries(provinceStateData).forEach((provinceStateDataEntry) => {\n          const provinceState = provinceStateDataEntry[0];\n          const provinceStateData = provinceStateDataEntry[1];\n          provinceStateData.dateData.forEach((dateDataItem) => {\n            tableData.push({ countryRegion, provinceState: provinceState, date: new Date(dateDataItem.date), cases: dateDataItem.cases });\n          });\n        });\n      });\n      return tableData;\n    };\n\n    dataTableNames.forEach((tableName) => {\n      alasql(`DROP TABLE IF EXISTS ${tableName}`);\n    });\n\n    const columnStatement = '(provinceState STRING, countryRegion STRING, date DATE, cases INT)'; // using 'cases' here instead of 'count' to avoid SQL conflicts\n    dataTableNames.forEach((tableName) => {\n      alasql(`CREATE TABLE ${tableName} ${columnStatement}`);\n    });\n\n    alasql.tables.confirmed.data = datasetToTableData(confirmedDataset, countryRegion, provinceState);\n    alasql.tables.deaths.data = datasetToTableData(deathsDataset, countryRegion, provinceState);\n    alasql.tables.recovered.data = datasetToTableData(recoveredDataset, countryRegion, provinceState);\n\n    setSqlTableLoaded(true);\n  }, [provinceState, countryRegion, confirmedDataset, deathsDataset, recoveredDataset, countryRegionsToProvinceStates, dataTableNames]);\n\n  if(!confirmedDataset || !deathsDataset || !recoveredDataset) {\n    return 'Loading...';\n  }\n\n  const queryData = () => {\n    if(!sqlTableLoaded) {\n      return null;\n    }\n\n    const [confirmedQueryResult, deathsQueryResult, recoveredQueryResult] = dataTableNames.map((tableName) => {\n      let query = `SELECT date, sum(cases) as cases FROM ${tableName}`;\n      let args = [];\n      if(countryRegion) {\n        query += ' WHERE countryRegion = ?'\n        args.push(countryRegion);\n\n        if(provinceState) {\n          query += ' AND provinceState = ?'\n          args.push(provinceState);\n        }\n      }\n      query += ' GROUP BY date ORDER BY date ASC';\n      return alasql(query, args);\n    });\n\n    return {\n      confirmedQueryResult,\n      deathsQueryResult,\n      recoveredQueryResult\n    }\n  };\n\n  const renderDatasets = () => {\n    if(!sqlTableLoaded) return 'Loading data...';\n\n    const {\n      confirmedQueryResult,\n      deathsQueryResult,\n      recoveredQueryResult\n    } = queryData();\n\n    return (\n      <>\n        <h1>Confirmed</h1>\n        { JSON.stringify(confirmedQueryResult) }\n        <h1>Deaths</h1>\n        { JSON.stringify(deathsQueryResult) }\n        <h1>Recovered</h1>\n        { JSON.stringify(recoveredQueryResult) }\n      </>\n    );\n  };\n\n  return (\n    <div className=\"App\">\n      <LocationSelector\n        selectedProvinceState={provinceState}\n        selectedCountryRegion={countryRegion}\n        countryRegionsToProvinceStates={countryRegionsToProvinceStates}\n        onCountryRegionChange={(e) => {\n          setCountryRegion(e.target.value);\n          setProvinceState(null); // reset provinceState selection whenever a new countryRegion is selected\n        }}\n        onProvinceStateChange={(e) => {\n          setProvinceState(e.target.value);\n        }}\n      />\n      {/* <p>\n        { renderDatasets() }\n      </p> */}\n      <div className=\"LineChartContainer\">\n        {\n          /* TODO: memoize this because it is expensive */\n          sqlTableLoaded && <BasicLineChart queryResult={queryData()} />\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}