{"version":3,"sources":["components/_shared/NavMenu/NavMenu.module.css","components/_shared/PageTitle/PageTitle.module.css","components/overview/Overview.module.css","modules/Data.js","components/_shared/TitleContext.js","modules/Colors.js","components/overview/Overview/ChartContainer/BasicLineChart/BasicLineChart.js","components/_shared/LocationSelector/LocationSelector.js","components/overview/Overview/ChartContainer/ChartContainer.js","components/overview/Overview/StatsContainer/StatCard/StatCard.js","components/overview/Overview/StatsContainer/StatCard/Header.js","components/overview/Overview/StatsContainer/StatCard/Content.js","modules/DataAnalysis.js","components/overview/Overview/StatsContainer/StatsContainer.js","components/overview/Overview.js","components/stats/Stats.js","components/_shared/NavMenu/SmallNavMenu.js","components/_shared/NavMenu/LeftNavMenu.js","components/_shared/NavMenu/NavMenu.js","components/_shared/PageTitle/PageTitle.js","App.js","index.js","components/overview/Overview/ChartContainer/BasicLineChart/BasicLineChart.module.css","components/overview/Overview/StatsContainer/StatCard/StatCard.module.css"],"names":["module","exports","DATA_SERIES","Object","freeze","CONFIRMED","DEATHS","RECOVERED","REGION_TO_SUB_REGION_MAP","sortedCountryRegionsToProvinceStates","CASES_TABLE_NAME","setup","alasql","values","map","series","join","tables","cases","data","tableData","querySeriesData","countryRegion","provinceState","query","args","push","results","forEach","row","name","date","React","createContext","lineDefs","Data","color","Colors","CustomizedXAxisTick","x","y","payload","transform","dy","className","css","TickTextX","fill","value","CustomizedYAxisTick","TickTextY","BasicLineChart","seriesData","style","height","margin","top","right","left","bottom","strokeDasharray","dataKey","stroke","tick","entries","key","type","dot","LocationSelector","selectedRegion","selectedSubRegion","onRegionChange","onSubRegionChange","regionOptions","keys","subRegionOptions","marginBottom","onChange","length","defaultProps","ChartContainer","setCountryRegion","setProvinceState","e","target","Container","props","StatCard","Content","children","Header","calculateAverageSlope","numDays","numSlopes","calculateSlopes","reduce","prev","cur","Error","i","slope","unshift","calculateConfirmedProjection","options","maxProjectionDays","maxProjectionVal","numProjectionBasisDays","projectionSet","basisDays","Math","min","averageSlope","round","lastVal","nextAdd","projection","console","log","getTotals","getLastThreeDays","slice","formatDayToDayValue","lastTwoSlopes","DataAnalysis","ele","confirmed","today","yesterday","incDecArrow","percent","toFixed","spanClass","good","bad","plusMinus","formatDaysUntilTotalInfection","projectionData","numeral","format","StatsContainer","allStats","header","stat","index","Overview","useState","setTitle","useContext","TitleContext","useMemo","useEffect","chartTitle","Stats","SmallNavBar","toggleNavMenuCallback","SmallNavBarContent","HamburgerIcon","onClick","LeftNavMenu","isNavExpanded","navClasses","NavMenu","visible","to","Link","href","setNavExpanded","PageTitle","title","App","Provider","MainContent","path","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0ef563b3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"NavMenu\":\"NavMenu_NavMenu__1wbSu\",\"SmallNavBar\":\"NavMenu_SmallNavBar__3uUfc\",\"visible\":\"NavMenu_visible__3498J\",\"SmallNavBarContent\":\"NavMenu_SmallNavBarContent__1T6-R\",\"HamburgerIcon\":\"NavMenu_HamburgerIcon__1UG7E\",\"Content\":\"NavMenu_Content__LwB_i\",\"Link\":\"NavMenu_Link__1pygS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"PageTitle\":\"PageTitle_PageTitle__WNUv_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"Overview_Container__OhQ1p\",\"ChartContainer\":\"Overview_ChartContainer__3Thyw\",\"StatsContainer\":\"Overview_StatsContainer__3uZUd\",\"bad\":\"Overview_bad__2-otZ\",\"good\":\"Overview_good__31RwL\"};","import alasql from 'alasql';\n\nimport sortedCountryRegionsToProvinceStates from '../data/sortedCountryRegionsToProvinceStates.json';\nimport tableData from '../data/tableData.json';\n\n/**\n * Name of the sql table.\n */\nconst CASES_TABLE_NAME = 'cases';\n\n/**\n * Enumeration of available data series.\n */\nconst DATA_SERIES = Object.freeze({\n  CONFIRMED: 'confirmed',\n  DEATHS: 'deaths',\n  RECOVERED: 'recovered'\n});\n\n/**\n * A sorted map that maps countries/regions to their corresponding provinces/states.\n */\nconst REGION_TO_SUB_REGION_MAP = Object.freeze(sortedCountryRegionsToProvinceStates);\n\nfunction setup() {\n  // Create the data table\n  alasql(`\n    CREATE TABLE ${CASES_TABLE_NAME} (\n      provinceState STRING,\n      countryRegion STRING,\n      date DATE,\n      ${Object.values(DATA_SERIES).map((series) => `${series} INT`).join(', ')}\n    )\n  `);\n\n  // Prime the data for the table\n  alasql.tables.cases.data = tableData;\n}\n\nfunction querySeriesData(countryRegion, provinceState) {\n  let query = `\n    SELECT date,\n    ${Object.values(DATA_SERIES).map((series) => `sum(${series}) as ${series}`).join(', ')}\n    FROM ${CASES_TABLE_NAME}\n  `;\n  let args = [];\n  if(countryRegion) {\n    query += ' WHERE countryRegion = ?'\n    args.push(countryRegion);\n\n    if(provinceState) {\n      query += ' AND provinceState = ?'\n      args.push(provinceState);\n    }\n  }\n  query += ' GROUP BY date ORDER BY date ASC';\n  const results = alasql(query, args);\n  results.forEach((row) => {\n    // Move 'date' property to 'name'\n    row.name = row.date;\n    delete row.date;\n  });\n\n  return results;\n}\n\nexport default {\n  // Constants\n  CASES_TABLE_NAME,\n  DATA_SERIES,\n  REGION_TO_SUB_REGION_MAP,\n\n  // Functions\n  setup,\n  querySeriesData,\n}\n","import React from 'react';\n\nexport default React.createContext('');\n","export default {\n  primary: '#E0E0E0',\n  lineConfirmed: '#895FDD',\n  lineDeaths: '#2D9999',\n  lineRecovered: '#4798E5'\n}\n","import React from 'react';\nimport PropTypes from 'prop-types'\n\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer\n} from 'recharts';\n\nimport css from './BasicLineChart.module.css'\n\nimport Colors from '../../../../../modules/Colors'\nimport Data from '../../../../../modules/Data';\n\nconst lineDefs = {\n  [Data.DATA_SERIES.CONFIRMED]: {\n    color: Colors.lineConfirmed\n  },\n  [Data.DATA_SERIES.DEATHS]: {\n    color: Colors.lineDeaths\n  },\n  [Data.DATA_SERIES.RECOVERED]: {\n    color: Colors.lineRecovered\n  }\n};\n\nconst CustomizedXAxisTick = ({x, y, payload}) => {\n  return (\n    <g transform={`translate(${x},${y})`}>\n      <text\n        x={0}\n        y={0}\n        dy={16}\n        className={css.TickTextX}\n        fill={Colors.primary}\n      >\n        {payload.value}\n      </text>\n    </g>\n  );\n}\n\nconst CustomizedYAxisTick = ({x, y, payload}) => {\n  return (\n    <g transform={`translate(${x},${y})`}>\n      <text\n        x={0}\n        y={0}\n        dy={5}\n        className={css.TickTextY}\n        fill={Colors.primary}\n      >\n        {payload.value}\n      </text>\n    </g>\n  );\n}\n\nconst BasicLineChart = ({seriesData}) => {\n  return (\n    <div style={{height: '500px'}}>\n      <ResponsiveContainer>\n        <LineChart\n          data={seriesData}\n          margin={{\n            top: 0, right: 4, left: 8, bottom: 0,\n          }}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis\n            dataKey=\"name\"\n            stroke={Colors.primary}\n            tick={CustomizedXAxisTick}\n            height={90}\n          />\n          <YAxis\n            stroke={Colors.primary}\n            tick={CustomizedYAxisTick}\n          />\n          <Tooltip />\n          <Legend stroke={Colors.primary} />\n          {\n            Object.entries(lineDefs).map(([key, value]) => (\n              <Line\n                type=\"monotone\"\n                dataKey={key}\n                stroke={value.color}\n                dot={{\n                  fill: value.color\n                }}\n                key={key}\n              />\n            ))\n          }\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nBasicLineChart.propTypes = {\n  seriesData: PropTypes.arrayOf(PropTypes.object).isRequired\n}\n\nexport default BasicLineChart;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Data from '../../../modules/Data';\n\nfunction LocationSelector({\n  selectedRegion,\n  selectedSubRegion,\n  onRegionChange,\n  onSubRegionChange\n}) {\n\n  const regionOptions = Object.keys(Data.REGION_TO_SUB_REGION_MAP);\n  const subRegionOptions = selectedSubRegion == null\n    ? []\n    : Data.REGION_TO_SUB_REGION_MAP[selectedSubRegion]\n\n  return (\n    <div style={{marginBottom: '1em'}}>\n        <select\n          onChange={onRegionChange}\n          value={selectedSubRegion || ''}\n          style={{margin: '1rem'}}\n        >\n          <option key={''} value=\"\">- All Regions -</option>\n          {regionOptions.map((countryRegion) => <option key={countryRegion} value={countryRegion}>{countryRegion}</option> )}\n        </select>\n\n        <select onChange={onSubRegionChange} value={selectedRegion || ''} style={{margin: '1rem'}}>\n          <option key={''} value=\"\">- All Subregions -</option>\n          {subRegionOptions.length > 1 && subRegionOptions.map((provinceState) => <option key={provinceState} value={provinceState}>{provinceState}</option> )}\n        </select>\n    </div>\n  );\n}\n\nexport default LocationSelector;\n\nLocationSelector.defaultProps = {\n  selectedRegion: null,\n  selectedSubRegion: null,\n};\n\nLocationSelector.propTypes = {\n  onRegionChange: PropTypes.func.isRequired,\n  onSubRegionChange: PropTypes.func.isRequired,\n  selectedRegion: PropTypes.string,\n  selectedSubRegion: PropTypes.string,\n};\n","import React from 'react';\n\nimport css from '../../Overview.module.css';\n\nimport BasicLineChart from './BasicLineChart/BasicLineChart';\nimport LocationSelector from '../../../_shared/LocationSelector/LocationSelector';\n\nconst ChartContainer = ({\n  provinceState,\n  countryRegion,\n  setCountryRegion,\n  setProvinceState,\n  seriesData\n}) => {\n  return (\n    <div className={css.ChartContainer}>\n      <LocationSelector\n        selectedRegion={provinceState}\n        selectedSubRegion={countryRegion}\n        onRegionChange={(e) => {\n          setCountryRegion(e.target.value === '' ? null : e.target.value);\n          setProvinceState(null); // reset provinceState selection whenever a new countryRegion is selected\n        }}\n        onSubRegionChange={(e) => {\n          setProvinceState(e.target.value === '' ? null : e.target.value);\n        }}\n      />\n      <div className=\"LineChartContainer\">\n        <BasicLineChart seriesData={seriesData} />\n      </div>\n    </div>\n  )\n}\n\nexport default ChartContainer;\n","import React from 'react';\n\nimport css from './StatCard.module.css';\nimport Header from './Header';\nimport Content from './Content';\n\nconst StatCard = (props) => {\n  return (\n    <div className={css.StatCard}>\n      <div className={css.Content}>\n        {props.children}\n      </div>\n    </div>\n  )\n}\n\nexport default {\n  Container: StatCard,\n  Header,\n  Content\n}\n","import React from 'react';\n\nconst Header = (props) => {\n  return (\n    <h2>{props.children}</h2>\n  )\n}\n\nexport default Header;\n","import React from 'react';\n\nconst Content = (props) => {\n  return (\n  <div>{props.children}</div>\n  )\n}\n\nexport default Content;\n","function calculateAverageSlope(values, numDays) {\n  const numSlopes = numDays - 1;\n  const slopes = calculateSlopes(values, numSlopes);\n\n  const average = slopes.reduce((prev, cur) => (prev+cur)) / numSlopes\n\n  return average;\n}\n\nfunction calculateSlopes(values, numSlopes) {\n  // Ensure there are enough values\n  if (values.length <= numSlopes) {\n    throw new Error(`Not enough data points provided to calculate ${numSlopes} slopes`);\n  }\n\n  const results = []\n  for (let i=0; i<numSlopes; i++) {\n    const slope = values[values.length-i-1] - values[values.length-i-2];\n    results.unshift(slope);\n  }\n\n  return results;\n}\n\n/**\n * @param {*} seriesData\n * @param {object} options\n * @param {number} [options.maxProjectionDays=14] - Max days to project. This will be equal to the\n * resulting array size. Default is 14.\n * @param {number} [options.maxProjectionVal=7530000000] - Max value to reach when performing\n * projections. Default is 7,530,000,000\n * @param {number} [options.numProjectionBasisDays=4] - Prior days to use when projecting future\n * values. Default is 4.\n */\nfunction calculateConfirmedProjection(\n    values,\n    options={}\n) {\n  // param check\n  if (!('maxProjectionDays' in options)) {\n    options.maxProjectionDays = 14\n  }\n  if (!('maxProjectionVal' in options)) {\n    options.maxProjectionVal = 7530000000\n  }\n  if (!('numProjectionBasisDays' in options)) {\n    options.numProjectionBasisDays = 4\n  }\n\n  const projectionSet = [];\n\n  const basisDays = Math.min(options.numProjectionBasisDays, values.length);\n\n  const averageSlope = Math.round(calculateAverageSlope(values, basisDays));\n\n  let lastVal = values[values.length-1];\n  let nextAdd = averageSlope;\n  for (let i=0; (i<options.maxProjectionDays) && (lastVal<options.maxProjectionVal); i++) {\n    const projection = lastVal + nextAdd;\n    projectionSet.push(projection)\n\n    lastVal = projection;\n    nextAdd += averageSlope;\n  }\n\n  console.log(projectionSet)\n  return projectionSet;\n}\n\nfunction getTotals(seriesData) {\n  return seriesData[seriesData.length - 1];\n}\n\nfunction getLastThreeDays(seriesData) {\n  return seriesData.slice(seriesData.length - 3, seriesData.length);\n}\n\nexport default {\n  calculateAverageSlope,\n  calculateSlopes,\n  calculateConfirmedProjection,\n\n  getTotals,\n  getLastThreeDays\n}\n","import React from 'react';\nimport numeral from 'numeral';\n\nimport css from '../../Overview.module.css';\n\nimport StatCard from './StatCard/StatCard';\nimport DataAnalysis from '../../../../modules/DataAnalysis';\n\nconst formatDayToDayValue = (seriesData) => {\n  const lastTwoSlopes = DataAnalysis.calculateSlopes(\n    seriesData.map((ele) => (ele.confirmed)),\n    2\n  );\n\n  let today = lastTwoSlopes[1]\n  let yesterday = lastTwoSlopes[0]\n\n  let incDecArrow = today > yesterday ? '↑' : '↓';\n  let percent = (100 * ((today - yesterday) / yesterday)).toFixed(1);\n\n  let spanClass = percent <= 0 ? css.good : css.bad;\n  let plusMinus = percent >= 0 ? '+' : ''\n\n  return (\n    <>\n      <div>\n        {`+${yesterday} → +${today}`}\n      </div>\n      <div>\n        (<span className={spanClass}>{`${plusMinus}${percent}%`}</span>)\n        <span className={spanClass}>{incDecArrow}</span>\n      </div>\n    </>\n  )\n}\n\nconst formatDaysUntilTotalInfection = (seriesData) => {\n  const MAX_PROJECTION_DAYS = 1000;\n\n  // later... save time when vaccine might be available and use that as the final day\n  const projectionData = DataAnalysis.calculateConfirmedProjection(\n    seriesData.map((ele) => (ele.confirmed)),\n    {maxProjectionDays:  MAX_PROJECTION_DAYS}\n  )\n\n  if (projectionData.length >= MAX_PROJECTION_DAYS) {\n    return 'Never';\n  } else {\n    return numeral(projectionData.length).format('0,0');\n  }\n}\n\nconst StatsContainer = ({seriesData}) => {\n  const allStats = [\n    {\n      header: 'Confirmed (total)',\n      value: numeral(DataAnalysis.getTotals(seriesData)['confirmed']).format('0,0')\n    },\n    {\n      header: 'Confirmed (day/day)',\n      value: formatDayToDayValue(seriesData)\n    },\n    {\n      header: 'Days Until 100% Infection',\n      value: formatDaysUntilTotalInfection(seriesData)\n    },\n  ];\n\n  return (\n    <div className={css.StatsContainer}>\n      {\n        allStats.map((stat, index) => (\n          <StatCard.Container key={index}>\n            <StatCard.Header>\n              {stat.header}\n            </StatCard.Header>\n            <StatCard.Content>\n              {stat.value}\n            </StatCard.Content>\n          </StatCard.Container>\n        ))\n      }\n    </div>\n  )\n}\n\nexport default StatsContainer;\n","import React, { useState, useContext, useEffect, useMemo } from 'react';\n\nimport css from './Overview.module.css';\n\nimport TitleContext from '../../components/_shared/TitleContext';\nimport ChartContainer from './Overview/ChartContainer/ChartContainer'\nimport StatsContainer from './Overview/StatsContainer/StatsContainer';\nimport Data from '../../modules/Data';\n\nconst Overview = () => {\n  const [countryRegion, setCountryRegion] = useState(null);\n  const [provinceState, setProvinceState] = useState(null);\n  const {setTitle} = useContext(TitleContext);\n\n  // Queries are expensive, so memoize them. This will also prevent unnecessary re-renders of the\n  // line chart.\n  const seriesData = useMemo(() => {\n    return Data.querySeriesData(countryRegion, provinceState);\n  }, [countryRegion, provinceState]);\n\n  /**\n   * Update title when region or sub-region changes\n   */\n  useEffect(() => {\n    let chartTitle = 'COVID-19 Cases: ';\n    if(provinceState || countryRegion) {\n      chartTitle += (provinceState ? ` ${provinceState},` : '')\n        + (countryRegion ? ` ${countryRegion}` : '');\n    } else {\n      chartTitle += 'Global';\n    }\n\n    setTitle(chartTitle);\n  }, [countryRegion, provinceState, setTitle]);\n\n  return (\n    <div className={css.Container}>\n      <ChartContainer\n        seriesData={seriesData}\n        countryRegion={countryRegion}\n        provinceState={provinceState}\n        setCountryRegion={setCountryRegion}\n        setProvinceState={setProvinceState}\n      />\n      <StatsContainer\n        seriesData={seriesData}\n      />\n    </div>\n  )\n}\n\nexport default Overview\n","import React from 'react'\n\nconst Stats = () => {\n    return (\n        <div>\n            secound route for stats!\n        </div>\n    )\n}\n\nexport default Stats\n","import React from 'react'\n\nimport css from './NavMenu.module.css';\n\nconst SmallNavBar = ({toggleNavMenuCallback}) => (\n  <div className={[css.SmallNavBar, 'sm'].join(' ')}>\n    <div className={css.SmallNavBarContent}>\n      <div className={css.HamburgerIcon} onClick={toggleNavMenuCallback}>\n        <div></div>\n        <div></div>\n        <div></div>\n      </div>\n    </div>\n  </div>\n)\n\n  export default SmallNavBar;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport css from './NavMenu.module.css';\n\nconst LeftNavMenu = ({isNavExpanded}) => {\n  const navClasses = [\n    css.NavMenu,\n    'lg',\n    isNavExpanded ? css.visible : null\n  ]\n\n  return (\n    <div className={navClasses.join(' ')}>\n      <div className={css.Content}>\n        <Link to='/' className={css.Link}>Overview</Link>\n\n        <hr />\n\n        <a\n          href='https://github.com/Harvtronix/my-corona'\n          target='_new'\n          className={css.Link}\n        >\n          GitHub&nbsp;&nbsp;<code>{'</>'}</code>\n        </a>\n\n      </div>\n    </div>\n  )\n}\n\nexport default LeftNavMenu\n","import React, { useState } from 'react';\n\nimport SmallNavBar from './SmallNavMenu';\nimport LeftNavMenu from './LeftNavMenu';\n\nconst NavMenu = () => {\n  const [isNavExpanded, setNavExpanded] = useState(false);\n\n  const toggleNavMenu = () => {\n    setNavExpanded(!isNavExpanded);\n  }\n\n  return (\n    <>\n      <SmallNavBar toggleNavMenuCallback={toggleNavMenu} />\n      <LeftNavMenu isNavExpanded={isNavExpanded} />\n    </>\n  )\n}\n\nexport default NavMenu;\n","import React, { useContext } from 'react';\n\nimport css from './PageTitle.module.css';\nimport TitleContext from '../TitleContext';\n\nconst PageTitle = () => {\n  const {title} = useContext(TitleContext);\n\n  return (\n    <h1 className={css.PageTitle}>\n      {title}\n    </h1>\n  )\n}\n\nexport default PageTitle;\n","import React, { useState } from 'react';\nimport { HashRouter, Switch, Route } from 'react-router-dom';\n\nimport css from './App.module.css';\nimport TitleContext from './components/_shared/TitleContext';\n\nimport Overview from './components/overview/Overview';\nimport Stats from './components/stats/Stats';\nimport NavMenu from './components/_shared/NavMenu/NavMenu';\nimport PageTitle from './components/_shared/PageTitle/PageTitle';\n\nfunction App() {\n  /**\n   * Backing state for the Title Context\n   */\n  const [title, setTitle] = useState('');\n\n  return (\n    <TitleContext.Provider value={{title, setTitle}}>\n      <HashRouter>\n        <div className={css.App}>\n          <NavMenu />\n          <div className={[css.MainContent, 'content'].join(' ')}>\n            <PageTitle />\n            <Switch>\n              <Route path=\"/stats\" component={Stats} />\n              <Route path=\"/overview\" component={Overview} />\n              <Route path=\"/\" component={Overview} />\n            </Switch>\n          </div>\n        </div>\n      </HashRouter>\n    </TitleContext.Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\n\nimport Data from './modules/Data';\nimport App from './App';\n\nData.setup();\n\nReactDOM.render(<App />, document.getElementById('root'));\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TickTextX\":\"BasicLineChart_TickTextX__3aDYh\",\"TickTextY\":\"BasicLineChart_TickTextY__4rLbJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"StatCard\":\"StatCard_StatCard__3FL3T\",\"Content\":\"StatCard_Content__1yBah\"};"],"sourceRoot":""}