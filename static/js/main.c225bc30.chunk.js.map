{"version":3,"sources":["getDatasets.js","App.js","index.js"],"names":["parseCsvData","data","csvParser","csvParse","csvArr","on","record","read","push","err","console","error","message","write","getDatasets","callback","axios","all","get","then","spread","confirmedResponse","deathsResponse","recoveredResponse","confirmedDataset","deathsDataset","recoveredDataset","countryRegionsToProvinceStates","forEach","row","i","countryRegion","provinceState","catch","log","App","useState","setCountryRegionsToProvinceStates","useEffect","datasetToTableData","dataset","date","Date","cases","countryRegionsToProvinceStateMap","columnStatement","alasql","tables","confirmed","deaths","recovered","className","JSON","stringify","ReactDOM","render","document","getElementById"],"mappings":"sUAOMA,EAAe,SAACC,GACpB,IAAMC,EAAYC,MACZC,EAAS,GAiBf,OAdAF,EAAUG,GAAG,YAAY,WAEvB,IADA,IAAIC,EACIA,EAASJ,EAAUK,QACzBH,EAAOI,KAAKF,MAIhBJ,EAAUG,GAAG,SAAS,SAASI,GAC7BC,QAAQC,MAAMF,EAAIG,YAGpBV,EAAUW,MAAMZ,GAGTG,GAoDMU,EAlCK,SAACC,GACnBC,IAAMC,IAAI,CACRD,IAAME,IAAI,4CACVF,IAAME,IAAI,yCACVF,IAAME,IAAI,8CACTC,KAAKH,IAAMI,QAAO,SAACC,EAAmBC,EAAgBC,GACvD,IAAIC,EAAmBxB,EAAaqB,EAAkBpB,MAClDwB,EAAgBzB,EAAasB,EAAerB,MAC5CyB,EAAmB1B,EAAauB,EAAkBtB,MAIlD0B,EAAiC,GACrCH,EAAiBI,SAAQ,SAACC,EAAKC,GAC7B,GAAS,IAANA,EAAH,CACA,IAAMC,EAAgBF,EAvDE,GAwDlBG,EAAgBH,EAzDE,GA2DpBE,IACJJ,EAA+BI,GAAiBJ,EAA+BI,IAAkB,GAC7FC,GACJL,EAA+BI,GAAevB,KAAKwB,QAErDjB,EACES,EACAC,EACAC,EACAC,OAEAM,OAAM,SAAUtB,GAClBD,QAAQwB,IAAIvB,O,gBCXDwB,MA1Df,WAAgB,IAAD,EAC6BC,mBAAS,YADtC,mBACNJ,EADM,aAE6BI,mBAAS,OAFtC,mBAENL,EAFM,aAG+DK,mBAAS,OAHxE,mBAGNT,EAHM,KAG0BU,EAH1B,KAgCb,OA3BAC,qBAAU,WACR,IAAMC,EAAqB,SAACC,GAE1B,MAAO,CACL,CAAER,cAAe,WAAYD,cAAe,KAAMU,KAAM,IAAIC,KAAK,WAAYC,MAAO,KACpF,CAAEX,cAAe,WAAYD,cAAe,KAAMU,KAAM,IAAIC,KAAK,WAAYC,MAAO,KACpF,CAAEX,cAAe,aAAcD,cAAe,KAAMU,KAAM,IAAIC,KAAK,WAAYC,MAAO,MACtF,CAAEX,cAAe,aAAcD,cAAe,KAAMU,KAAM,IAAIC,KAAK,WAAYC,MAAO,OAK1F7B,GAAY,SAACU,EAAkBC,EAAeC,EAAkBkB,GAC9D,IAAMC,EAAkB,qEACxBC,IAAO,0BAAD,OAA2BD,IACjCC,IAAO,uBAAD,OAAwBD,IAC9BC,IAAO,0BAAD,OAA2BD,IAEjCC,IAAOC,OAAOC,UAAU/C,KAAOsC,IAC/BO,IAAOC,OAAOE,OAAOhD,KAAOsC,IAC5BO,IAAOC,OAAOG,UAAUjD,KAAOsC,IAG/BF,EAAkCO,QAEnC,IAECjB,EAeF,yBAAKwB,UAAU,OACb,qDAGA,2BAbA,oCAEIC,KAAKC,UAAUP,IAAO,wEAAyE,CAACd,EAAeD,QAP9G,cCjCXuB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.c225bc30.chunk.js","sourcesContent":["import axios from 'axios';\nimport csvParse from 'csv-parse';\n\nconst PROVINCE_STATE_COLUMN = 0;\nconst COUNTRY_REGION_COLUMN = 1;\n\n// Set up CSV parser\nconst parseCsvData = (data) => {\n  const csvParser = csvParse();\n  const csvArr = [];\n\n  // Use the readable stream api\n  csvParser.on('readable', function(){\n    let record;\n    while ((record = csvParser.read())) {\n      csvArr.push(record)\n    }\n  });\n  // Catch any error\n  csvParser.on('error', function(err){\n    console.error(err.message)\n  });\n  // Send data to read to the stream\n  csvParser.write(data);\n\n  // Return the CSV as a 2D array\n  return csvArr;\n};\n\n\n/**\n * Callback for retrieving dataset data.\n *\n * @callback datasetsCallback\n * @param {string[][]} confirmedData -\n * @param {string[][]} deathsData -\n * @param {string[][]} recoveredData -\n */\n\n/**\n * Retrieves the primary datasets for the my-corona app.\n *\n * @param {datasetsCallback} callback - A callback to run.\n */\nconst getDatasets = (callback) => {\n  axios.all([\n    axios.get('/data/time_series_19-covid-Confirmed.csv'),\n    axios.get('/data/time_series_19-covid-Deaths.csv'),\n    axios.get('/data/time_series_19-covid-Recovered.csv')\n  ]).then(axios.spread((confirmedResponse, deathsResponse, recoveredResponse) => {\n    let confirmedDataset = parseCsvData(confirmedResponse.data);\n    let deathsDataset = parseCsvData(deathsResponse.data);\n    let recoveredDataset = parseCsvData(recoveredResponse.data);\n\n\n\n    let countryRegionsToProvinceStates = {};\n    confirmedDataset.forEach((row, i) => {\n      if(i === 0) return;\n      const countryRegion = row[COUNTRY_REGION_COLUMN];\n      const provinceState = row[PROVINCE_STATE_COLUMN];\n\n      if(!countryRegion) return;\n      countryRegionsToProvinceStates[countryRegion] = countryRegionsToProvinceStates[countryRegion] || [];\n      if(!provinceState) return;\n      countryRegionsToProvinceStates[countryRegion].push(provinceState);\n    });\n    callback(\n      confirmedDataset,\n      deathsDataset,\n      recoveredDataset,\n      countryRegionsToProvinceStates\n    );\n  })).catch(function (error) {\n    console.log(error);\n  });\n};\n\nexport default getDatasets;\n","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport getDatasets from './getDatasets';\nimport alasql from 'alasql';\n\nfunction App() {\n  const [provinceState, setProvinceState] = useState('New York');\n  const [countryRegion, setCountryRegion] = useState('US');\n  const [countryRegionsToProvinceStates, setCountryRegionsToProvinceStates] = useState(null);\n\n  useEffect(() => {\n    const datasetToTableData = (dataset) => {\n      // TODO: Actually generate returned data from passed-in dataset param\n      return [\n        { provinceState: 'New York', countryRegion: 'US', date: new Date('1/22/20'), cases: '5' },\n        { provinceState: 'New York', countryRegion: 'US', date: new Date('1/23/20'), cases: '6' },\n        { provinceState: 'New Jersey', countryRegion: 'US', date: new Date('1/22/20'), cases: '10' },\n        { provinceState: 'New Jersey', countryRegion: 'US', date: new Date('1/23/20'), cases: '1' },\n      ];\n    };\n\n    // Get latest app data\n    getDatasets((confirmedDataset, deathsDataset, recoveredDataset, countryRegionsToProvinceStateMap) => {\n      const columnStatement = '(provinceState STRING, countryRegion STRING, date DATE, cases INT)'; // using 'cases' here instead of 'count' to avoid SQL conflicts\n      alasql(`CREATE TABLE confirmed ${columnStatement}`);\n      alasql(`CREATE TABLE deaths ${columnStatement}`);\n      alasql(`CREATE TABLE recovered ${columnStatement}`);\n\n      alasql.tables.confirmed.data = datasetToTableData(confirmedDataset);\n      alasql.tables.deaths.data = datasetToTableData(deathsDataset);\n      alasql.tables.recovered.data = datasetToTableData(recoveredDataset);\n\n      // TODO: Use this data to populate dropdown menu in UI, and update provinceState and countryRegion states.\n      setCountryRegionsToProvinceStates(countryRegionsToProvinceStateMap);\n    });\n  }, []);\n\n  if(!countryRegionsToProvinceStates) {\n    return 'Loading...';\n  }\n\n  const renderDatasets = () => {\n    return (\n      <>\n        {\n          JSON.stringify(alasql('SELECT * FROM confirmed WHERE provinceState = ? AND countryRegion = ?', [provinceState, countryRegion]))\n        }\n      </>\n    );\n  };\n\n  return (\n    <div className=\"App\">\n      <p>\n        I heard you like data!\n      </p>\n      <p>\n        { renderDatasets() }\n      </p>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}